#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "parser.h"
#include "Menu.h"
#include "Biblioteca.h"
#include "Libro.h"
#include "Editorial.h"


/** \brief Carga los datos de los empleados desde el archivo data.csv (modo texto).
 *
 * \param path char* Nombre y ruta del archivo.
 * \param pArrayListEmployee LinkedList* Lista linkeada donde se ubican los datos.
 * \return int Devuelve 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int controller_loadFromTextLibro(char* path , LinkedList* pArrayListLibro)
{
	FILE* pArchivo = NULL;

	int retorno = 1;

	if(path != NULL && pArrayListLibro != NULL)
	{
		pArchivo = fopen(path, "r");
		if(pArchivo != NULL)
		{
			parser_LibroFromText(pArchivo, pArrayListLibro);
			fclose(pArchivo);
			retorno = 0;
		}





	}
	return retorno;
}

int controller_loadFromTextEditorial(char* path , LinkedList* pArrayListEmpleado)
{
	FILE* pArchivo = NULL;

	int retorno = 1;

	if(path != NULL && pArrayListEmpleado != NULL)
	{
		pArchivo = fopen(path, "r");
		if(pArchivo != NULL)
		{
			parser_EmployeeFromText(pArchivo, pArrayListEmpleado);
			fclose(pArchivo);
			retorno = 0;
		}





	}
	return retorno;
}

/** \brief Listar empleados
 *
  * \param pArrayListEmployee LinkedList* Lista linkeada donde se obtienen los empleados.
 * \return int Devuelve 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee)
{
    Employee* pEmployee = NULL;
    int indice;
    int retorno = 1;
    if(pArrayListEmployee != NULL)
    {
        printf("%5s | %15s | %16s | %6s\n", "Id", "Nombre", "Horas trabajadas", "Sueldo");
        for(indice = 0; indice < ll_len(pArrayListEmployee); indice++)
        {
                pEmployee = (Employee *)ll_get(pArrayListEmployee, indice);
                employee_print(pEmployee);
        }
        retorno = 0;
    }
    return retorno;
}

/** \brief Ordenar empleados
 *
  * \param pArrayListEmployee LinkedList* Lista linkeada donde se obtienen los empleados.
 * \return int Devuelve 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee)
{
    int opcion;
    int retorno = 1;
    LinkedList* pAuxListEmployee = NULL;
    if(pArrayListEmployee != NULL)
    {
        pAuxListEmployee = ll_clone(pArrayListEmployee);
        opcion = menuSortEmployee();
        switch(opcion)
        {
            case 1:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararId, 0);
                printf("\nLista de empleados ordenada por Id(mayor a menor).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 2:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararNombre, 1);
                printf("\nLista de empleados ordenada por nombre(A-Z).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 3:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararNombre, 0);
                printf("\nLista de empleados ordenada por nombre(Z-A).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 4:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararHorasTrabajadas, 1);
                printf("\nLista de empleados ordenada por cantidad de horas trabajadas(menor a mayor).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 5:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararHorasTrabajadas, 0);
                printf("\nLista de empleados ordenada por cantidad de horas trabajadas(mayor a menor).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 6:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararSueldo, 1);
                printf("\nLista de empleados ordenada por sueldo(menor a mayor).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 7:
                printf("Ordenando...\n");
                ll_sort(pAuxListEmployee, employee_CompararSueldo, 0);
                printf("\nLista de empleados ordenada por sueldo(mayor a menor).\n\n");
                controller_ListEmployee(pAuxListEmployee);
                break;
            case 8:
                printf("\nLista no ordenada.\n");
                break;
        }
        ll_deleteLinkedList(pAuxListEmployee);
        retorno = 0;
    }
    return retorno;
}

/

