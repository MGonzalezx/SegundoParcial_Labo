#include "Libro.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/** \brief Constructor de eLibro.
 *
 * \param void
 * \return eLibro* Retorna un puntero del libro o NULL.
 *
 */
eLibro* eLibro_new(void)
{
	eLibro* pLibro = NULL;
	pLibro = (eLibro *) malloc(sizeof(eLibro));
    return pLibro;
}

/** \brief Constructor parametrizado del libro.
 *
 * \param idStr char*
 * \param tituloStr char*
 * \param autorStr char*
 * \param precioStr char*
 * \param editorialStr char*
 * \return eLibro* Retorna un puntero del libro con los datos cargados o NULL.
 *
 */
eLibro* eLibro_newParametros(char* idStr,char* tituloStr,char* autorStr, char* precioStr, char* editorialStr)
{
	eLibro* pLibro = NULL;
    int id;
    float precio;
    int idEditorial;
    if(idStr != NULL && tituloStr != NULL && autorStr != NULL && precioStr != NULL && editorialStr != NULL)
    {
    	pLibro = eLibro_new();
        if(pLibro != NULL)
        {
            id = atoi(idStr);
            idEditorial = atoi(editorialStr);
            precio = atoi(precioStr);
            eLibro_setId(pLibro, id);
            eLibro_setTitulo(pLibro, tituloStr);
            eLibro_setAutor(pLibro, autorStr);
            eLibro_setPrecio(pLibro, precio);
            eLibro_setIdEditorial(pLibro, idEditorial);
        }

    }
    return pLibro;
}

/** \brief Elimina un empleado de la memoria.
 *
 * \param this Employee*
 * \return void
 *
 */
void eLibro_delete(eLibro* this)
{
    if(this != NULL)
    {
        free(this);
    }
}

/** \brief  Establece el id de un empleado.
 *
 * \param this Employee*
 * \param id int
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_setId(eLibro* this,int id)
{
	int retorno = 1;
    if(this != NULL)
    {
        this->id = id;
        retorno =0;
    }
    return retorno;
}

/** \brief Devuelve el id de un empleado.
 *
 * \param this Employee*
 * \param id int*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_getId(eLibro* this,int* id)
{
	int retorno = 1;
    if(this != NULL && id != NULL)
    {
        *id = this->id;
        retorno = 0;
    }
    return retorno;
}

/** \brief Establece el nombre de un empleado.
 *
 * \param this Employee*
 * \param nombre char*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_setTitulo(eLibro* this,char* titulo)
{
	int retorno = 1;
    if(this != NULL && titulo != NULL)
    {
        strcpy(this->titulo, titulo);
        retorno = 0;
    }
    return retorno;
}

/** \brief Devuelve el nombre de un empleado.
 *
 * \param this Employee*
 * \param nombre char*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_getTitulo(eLibro* this,char* titulo)
{
	int retorno = 1;
    if(this != NULL && titulo != NULL)
    {
        strcpy(titulo, this->titulo);
        retorno = 0;
    }
    return retorno;
}

int eLibro_setAutor(eLibro* this,char* autor)
{
	int retorno = 1;
    if(this != NULL && autor != NULL)
    {
        strcpy(this->autor, autor);
        retorno = 0;
    }
    return retorno;
}

/** \brief Devuelve el nombre de un empleado.
 *
 * \param this Employee*
 * \param nombre char*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_getAutor(eLibro* this,char* autor)
{
	int retorno = 1;
    if(this != NULL && autor != NULL)
    {
        strcpy(autor, this->autor);
        retorno = 0;
    }
    return retorno;
}



/** \brief Establece la cantidad de horas trabajadas de un empleado.
 *
 * \param this Employee*
 * \param horasTrabajadas int
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_setIdEditorial(eLibro* this,int editorial)
{
	int retorno = 1;
    if(this != NULL)
    {
        this->idEditorial = editorial;
        retorno = 0;
    }
    return retorno;
}

/** \brief Devuelve la cantidad de horas trabajadas de un empleado.
 *
 * \param this Employee*
 * \param horasTrabajadas int*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_getIdEditorial(eLibro* this,int* editorial)
{
	int retorno = 1;
    if(this != NULL && editorial != NULL)
    {
        *editorial = this->idEditorial;
        retorno = 0;
    }
    return retorno;
}

/** \brief Establece el sueldo de un empleado.
 *
 * \param this Employee*
 * \param sueldo int
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_setPrecio(eLibro* this,int precio)
{
	int retorno = 1;
    if(this != NULL)
    {
        this->precio = precio;
        retorno = 0;
    }
    return retorno;
}

/** \brief Devuelve el sueldo de un empleado.
 *
 * \param this Employee*
 * \param sueldo int*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_getPrecio(eLibro* this,int* precio)
{
	int retorno = 1;
    if(this != NULL && precio != NULL)
    {
        *precio = this->precio;
        retorno = 0;
    }
    return retorno;
}

/** \brief Imprime un empleado en pantalla.
 *
 * \param this Employee*
 * \return int Retorna 0 si se realizo o 1 en caso de puntero NULL.
 *
 */
int eLibro_print(eLibro* this, eEditorial* listadoEditoriales)
{
	int retorno = 1;
	int i;
    if(this != NULL)
    {

    	for (i = 0; i<ll_len(listadoEditoriales); i++)
    	{
    		if(listadoEditoriales[i].idEditorial == this->idEditorial){
    			printf("%5d | %15s | %15s| %15d | %15s\n", this->id, this->titulo, this->autor, this->precio, listadoEditoriales->idEditorial);
    		}

    	}

        retorno = 0;
    }
    return retorno;
}




